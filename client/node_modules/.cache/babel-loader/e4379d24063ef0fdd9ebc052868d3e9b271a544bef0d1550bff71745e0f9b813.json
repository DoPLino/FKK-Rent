{"ast":null,"code":"import api from './api';\nclass UserService {\n  // Get all users (admin only)\n  async getUsers(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/users?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n  }\n\n  // Get current user profile\n  async getProfile() {\n    try {\n      const response = await api.get('/users/profile');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  }\n\n  // Update user profile\n  async updateProfile(profileData) {\n    try {\n      const response = await api.put('/users/profile', profileData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      const response = await api.put('/users/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  }\n\n  // Create new user (admin only)\n  async createUser(userData) {\n    try {\n      const response = await api.post('/users', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  // Update user (admin only)\n  async updateUser(id, userData) {\n    try {\n      const response = await api.put(`/users/${id}`, userData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  }\n\n  // Delete user (admin only)\n  async deleteUser(id) {\n    try {\n      const response = await api.delete(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  }\n\n  // Get user by ID (admin only)\n  async getUserById(id) {\n    try {\n      const response = await api.get(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  }\n\n  // Toggle user active status (admin only)\n  async toggleUserStatus(id) {\n    try {\n      const response = await api.patch(`/users/${id}/toggle-status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error toggling user status:', error);\n      throw error;\n    }\n  }\n\n  // Get user statistics\n  async getUserStats() {\n    try {\n      const response = await api.get('/users/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user stats:', error);\n      throw error;\n    }\n  }\n\n  // Get user activity\n  async getUserActivity(userId, timeRange = 'month') {\n    try {\n      const response = await api.get(`/users/${userId}/activity?range=${timeRange}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user activity:', error);\n      throw error;\n    }\n  }\n\n  // Reset user password (admin only)\n  async resetUserPassword(id) {\n    try {\n      const response = await api.post(`/users/${id}/reset-password`);\n      return response.data;\n    } catch (error) {\n      console.error('Error resetting user password:', error);\n      throw error;\n    }\n  }\n\n  // Update user preferences\n  async updatePreferences(preferences) {\n    try {\n      const response = await api.put('/users/preferences', preferences);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating preferences:', error);\n      throw error;\n    }\n  }\n\n  // Get user notifications\n  async getNotifications() {\n    try {\n      const response = await api.get('/users/notifications');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      throw error;\n    }\n  }\n\n  // Mark notification as read\n  async markNotificationRead(notificationId) {\n    try {\n      const response = await api.patch(`/users/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      throw error;\n    }\n  }\n\n  // Mark all notifications as read\n  async markAllNotificationsRead() {\n    try {\n      const response = await api.patch('/users/notifications/read-all');\n      return response.data;\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      throw error;\n    }\n  }\n\n  // Export users to CSV (admin only)\n  async exportUsers(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/users/export?${params.toString()}`, {\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `users-${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n      return true;\n    } catch (error) {\n      console.error('Error exporting users:', error);\n      throw error;\n    }\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["api","UserService","getUsers","filters","params","URLSearchParams","Object","keys","forEach","key","append","response","get","toString","data","error","console","getProfile","updateProfile","profileData","put","changePassword","passwordData","createUser","userData","post","updateUser","id","deleteUser","delete","getUserById","toggleUserStatus","patch","getUserStats","getUserActivity","userId","timeRange","resetUserPassword","updatePreferences","preferences","getNotifications","markNotificationRead","notificationId","markAllNotificationsRead","exportUsers","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","Date","toISOString","split","body","appendChild","click","remove","revokeObjectURL","userService"],"sources":["/Users/lino/Downloads/test/client/src/services/userService.js"],"sourcesContent":["import api from './api';\n\nclass UserService {\n  // Get all users (admin only)\n  async getUsers(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params.append(key, filters[key]);\n        }\n      });\n      \n      const response = await api.get(`/users?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n  }\n\n  // Get current user profile\n  async getProfile() {\n    try {\n      const response = await api.get('/users/profile');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  }\n\n  // Update user profile\n  async updateProfile(profileData) {\n    try {\n      const response = await api.put('/users/profile', profileData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      const response = await api.put('/users/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  }\n\n  // Create new user (admin only)\n  async createUser(userData) {\n    try {\n      const response = await api.post('/users', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  // Update user (admin only)\n  async updateUser(id, userData) {\n    try {\n      const response = await api.put(`/users/${id}`, userData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  }\n\n  // Delete user (admin only)\n  async deleteUser(id) {\n    try {\n      const response = await api.delete(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  }\n\n  // Get user by ID (admin only)\n  async getUserById(id) {\n    try {\n      const response = await api.get(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  }\n\n  // Toggle user active status (admin only)\n  async toggleUserStatus(id) {\n    try {\n      const response = await api.patch(`/users/${id}/toggle-status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error toggling user status:', error);\n      throw error;\n    }\n  }\n\n  // Get user statistics\n  async getUserStats() {\n    try {\n      const response = await api.get('/users/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user stats:', error);\n      throw error;\n    }\n  }\n\n  // Get user activity\n  async getUserActivity(userId, timeRange = 'month') {\n    try {\n      const response = await api.get(`/users/${userId}/activity?range=${timeRange}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user activity:', error);\n      throw error;\n    }\n  }\n\n  // Reset user password (admin only)\n  async resetUserPassword(id) {\n    try {\n      const response = await api.post(`/users/${id}/reset-password`);\n      return response.data;\n    } catch (error) {\n      console.error('Error resetting user password:', error);\n      throw error;\n    }\n  }\n\n  // Update user preferences\n  async updatePreferences(preferences) {\n    try {\n      const response = await api.put('/users/preferences', preferences);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating preferences:', error);\n      throw error;\n    }\n  }\n\n  // Get user notifications\n  async getNotifications() {\n    try {\n      const response = await api.get('/users/notifications');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      throw error;\n    }\n  }\n\n  // Mark notification as read\n  async markNotificationRead(notificationId) {\n    try {\n      const response = await api.patch(`/users/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      throw error;\n    }\n  }\n\n  // Mark all notifications as read\n  async markAllNotificationsRead() {\n    try {\n      const response = await api.patch('/users/notifications/read-all');\n      return response.data;\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      throw error;\n    }\n  }\n\n  // Export users to CSV (admin only)\n  async exportUsers(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params.append(key, filters[key]);\n        }\n      });\n      \n      const response = await api.get(`/users/export?${params.toString()}`, {\n        responseType: 'blob'\n      });\n      \n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `users-${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n      \n      return true;\n    } catch (error) {\n      console.error('Error exporting users:', error);\n      throw error;\n    }\n  }\n}\n\nexport const userService = new UserService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}