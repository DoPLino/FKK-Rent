{"ast":null,"code":"var _jsxFileName = \"/Users/lino/Downloads/test/client/src/contexts/DarkModeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkModeContext = /*#__PURE__*/createContext();\nexport const useDarkMode = () => {\n  _s();\n  const context = useContext(DarkModeContext);\n  if (!context) {\n    throw new Error('useDarkMode must be used within a DarkModeProvider');\n  }\n  return context;\n};\n_s(useDarkMode, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const DarkModeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check localStorage first\n    const saved = localStorage.getItem('darkMode');\n    if (saved !== null) {\n      return saved === 'true';\n    }\n\n    // Check system preference\n    if (window.matchMedia) {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n\n    // Default to light mode\n    return false;\n  });\n  useEffect(() => {\n    // Update localStorage\n    localStorage.setItem('darkMode', isDarkMode.toString());\n\n    // Update document class\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n  useEffect(() => {\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      // Only auto-switch if user hasn't manually set a preference\n      const saved = localStorage.getItem('darkMode');\n      if (saved === null) {\n        setIsDarkMode(e.matches);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n  const toggleDarkMode = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  const setDarkMode = dark => {\n    setIsDarkMode(dark);\n  };\n  const value = {\n    isDarkMode,\n    toggleDarkMode,\n    setDarkMode\n  };\n  return /*#__PURE__*/_jsxDEV(DarkModeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s2(DarkModeProvider, \"sWIFwik1Ws70Rmcg4pJcdTWbQlA=\");\n_c = DarkModeProvider;\nvar _c;\n$RefreshReg$(_c, \"DarkModeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","DarkModeContext","useDarkMode","_s","context","Error","DarkModeProvider","children","_s2","isDarkMode","setIsDarkMode","saved","localStorage","getItem","window","matchMedia","matches","setItem","toString","document","documentElement","classList","add","remove","mediaQuery","handleChange","e","addEventListener","removeEventListener","toggleDarkMode","prev","setDarkMode","dark","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lino/Downloads/test/client/src/contexts/DarkModeContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst DarkModeContext = createContext();\n\nexport const useDarkMode = () => {\n  const context = useContext(DarkModeContext);\n  if (!context) {\n    throw new Error('useDarkMode must be used within a DarkModeProvider');\n  }\n  return context;\n};\n\nexport const DarkModeProvider = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check localStorage first\n    const saved = localStorage.getItem('darkMode');\n    if (saved !== null) {\n      return saved === 'true';\n    }\n    \n    // Check system preference\n    if (window.matchMedia) {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    \n    // Default to light mode\n    return false;\n  });\n\n  useEffect(() => {\n    // Update localStorage\n    localStorage.setItem('darkMode', isDarkMode.toString());\n    \n    // Update document class\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e) => {\n      // Only auto-switch if user hasn't manually set a preference\n      const saved = localStorage.getItem('darkMode');\n      if (saved === null) {\n        setIsDarkMode(e.matches);\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    \n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  const setDarkMode = (dark) => {\n    setIsDarkMode(dark);\n  };\n\n  const value = {\n    isDarkMode,\n    toggleDarkMode,\n    setDarkMode\n  };\n\n  return (\n    <DarkModeContext.Provider value={value}>\n      {children}\n    </DarkModeContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMO,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGR,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,WAAW;AAQxB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IACjD;IACA,MAAMa,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,IAAIF,KAAK,KAAK,IAAI,EAAE;MAClB,OAAOA,KAAK,KAAK,MAAM;IACzB;;IAEA;IACA,IAAIG,MAAM,CAACC,UAAU,EAAE;MACrB,OAAOD,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;IAClE;;IAEA;IACA,OAAO,KAAK;EACd,CAAC,CAAC;EAEFnB,SAAS,CAAC,MAAM;IACd;IACAe,YAAY,CAACK,OAAO,CAAC,UAAU,EAAER,UAAU,CAACS,QAAQ,CAAC,CAAC,CAAC;;IAEvD;IACA,IAAIT,UAAU,EAAE;MACdU,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC,EAAE,CAACd,UAAU,CAAC,CAAC;EAEhBZ,SAAS,CAAC,MAAM;IACd;IACA,MAAM2B,UAAU,GAAGV,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IAEpE,MAAMU,YAAY,GAAIC,CAAC,IAAK;MAC1B;MACA,MAAMf,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,IAAIF,KAAK,KAAK,IAAI,EAAE;QAClBD,aAAa,CAACgB,CAAC,CAACV,OAAO,CAAC;MAC1B;IACF,CAAC;IAEDQ,UAAU,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IAEnD,OAAO,MAAM;MACXD,UAAU,CAACI,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3BnB,aAAa,CAACoB,IAAI,IAAI,CAACA,IAAI,CAAC;EAC9B,CAAC;EAED,MAAMC,WAAW,GAAIC,IAAI,IAAK;IAC5BtB,aAAa,CAACsB,IAAI,CAAC;EACrB,CAAC;EAED,MAAMC,KAAK,GAAG;IACZxB,UAAU;IACVoB,cAAc;IACdE;EACF,CAAC;EAED,oBACE/B,OAAA,CAACC,eAAe,CAACiC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA1B,QAAA,EACpCA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAAC9B,GAAA,CAnEWF,gBAAgB;AAAAiC,EAAA,GAAhBjC,gBAAgB;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}