{"ast":null,"code":"import api from './api';\nclass BookingService {\n  // Get all bookings with optional filters\n  async getBookings(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/bookings?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching bookings:', error);\n      throw error;\n    }\n  }\n\n  // Get user's own bookings\n  async getUserBookings() {\n    try {\n      const response = await api.get('/bookings/user');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user bookings:', error);\n      throw error;\n    }\n  }\n\n  // Get single booking by ID\n  async getBooking(id) {\n    try {\n      const response = await api.get(`/bookings/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching booking:', error);\n      throw error;\n    }\n  }\n\n  // Create new booking\n  async createBooking(bookingData) {\n    try {\n      const response = await api.post('/bookings', bookingData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw error;\n    }\n  }\n\n  // Update booking\n  async updateBooking(id, bookingData) {\n    try {\n      const response = await api.put(`/bookings/${id}`, bookingData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating booking:', error);\n      throw error;\n    }\n  }\n\n  // Cancel booking\n  async cancelBooking(id) {\n    try {\n      const response = await api.patch(`/bookings/${id}/cancel`);\n      return response.data;\n    } catch (error) {\n      console.error('Error cancelling booking:', error);\n      throw error;\n    }\n  }\n\n  // Check availability\n  async checkAvailability(availabilityData) {\n    try {\n      const response = await api.post('/bookings/check-availability', availabilityData);\n      return response.data;\n    } catch (error) {\n      console.error('Error checking availability:', error);\n      throw error;\n    }\n  }\n\n  // Get booking statistics\n  async getBookingStats(timeRange = 'month') {\n    try {\n      const response = await api.get(`/bookings/stats?range=${timeRange}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching booking stats:', error);\n      throw error;\n    }\n  }\n\n  // Get upcoming bookings\n  async getUpcomingBookings() {\n    try {\n      const response = await api.get('/bookings/upcoming');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching upcoming bookings:', error);\n      throw error;\n    }\n  }\n\n  // Get overdue bookings\n  async getOverdueBookings() {\n    try {\n      const response = await api.get('/bookings/overdue');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching overdue bookings:', error);\n      throw error;\n    }\n  }\n\n  // Export bookings to CSV\n  async exportBookings(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/bookings/export?${params.toString()}`, {\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `bookings-${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n      return true;\n    } catch (error) {\n      console.error('Error exporting bookings:', error);\n      throw error;\n    }\n  }\n}\nexport const bookingService = new BookingService();","map":{"version":3,"names":["api","BookingService","getBookings","filters","params","URLSearchParams","Object","keys","forEach","key","append","response","get","toString","data","error","console","getUserBookings","getBooking","id","createBooking","bookingData","post","updateBooking","put","cancelBooking","patch","checkAvailability","availabilityData","getBookingStats","timeRange","getUpcomingBookings","getOverdueBookings","exportBookings","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","Date","toISOString","split","body","appendChild","click","remove","revokeObjectURL","bookingService"],"sources":["/Users/lino/Downloads/test/client/src/services/bookingService.js"],"sourcesContent":["import api from './api';\n\nclass BookingService {\n  // Get all bookings with optional filters\n  async getBookings(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params.append(key, filters[key]);\n        }\n      });\n      \n      const response = await api.get(`/bookings?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching bookings:', error);\n      throw error;\n    }\n  }\n\n  // Get user's own bookings\n  async getUserBookings() {\n    try {\n      const response = await api.get('/bookings/user');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user bookings:', error);\n      throw error;\n    }\n  }\n\n  // Get single booking by ID\n  async getBooking(id) {\n    try {\n      const response = await api.get(`/bookings/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching booking:', error);\n      throw error;\n    }\n  }\n\n  // Create new booking\n  async createBooking(bookingData) {\n    try {\n      const response = await api.post('/bookings', bookingData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw error;\n    }\n  }\n\n  // Update booking\n  async updateBooking(id, bookingData) {\n    try {\n      const response = await api.put(`/bookings/${id}`, bookingData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating booking:', error);\n      throw error;\n    }\n  }\n\n  // Cancel booking\n  async cancelBooking(id) {\n    try {\n      const response = await api.patch(`/bookings/${id}/cancel`);\n      return response.data;\n    } catch (error) {\n      console.error('Error cancelling booking:', error);\n      throw error;\n    }\n  }\n\n  // Check availability\n  async checkAvailability(availabilityData) {\n    try {\n      const response = await api.post('/bookings/check-availability', availabilityData);\n      return response.data;\n    } catch (error) {\n      console.error('Error checking availability:', error);\n      throw error;\n    }\n  }\n\n  // Get booking statistics\n  async getBookingStats(timeRange = 'month') {\n    try {\n      const response = await api.get(`/bookings/stats?range=${timeRange}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching booking stats:', error);\n      throw error;\n    }\n  }\n\n  // Get upcoming bookings\n  async getUpcomingBookings() {\n    try {\n      const response = await api.get('/bookings/upcoming');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching upcoming bookings:', error);\n      throw error;\n    }\n  }\n\n  // Get overdue bookings\n  async getOverdueBookings() {\n    try {\n      const response = await api.get('/bookings/overdue');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching overdue bookings:', error);\n      throw error;\n    }\n  }\n\n  // Export bookings to CSV\n  async exportBookings(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params.append(key, filters[key]);\n        }\n      });\n      \n      const response = await api.get(`/bookings/export?${params.toString()}`, {\n        responseType: 'blob'\n      });\n      \n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `bookings-${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n      \n      return true;\n    } catch (error) {\n      console.error('Error exporting bookings:', error);\n      throw error;\n    }\n  }\n}\n\nexport const bookingService = new BookingService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}