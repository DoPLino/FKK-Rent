{"ast":null,"code":"import api from './api';\nclass AuthService {\n  // Login user\n  async login(credentials) {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  }\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Error during registration:', error);\n      throw error;\n    }\n  }\n\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n  }\n\n  // Refresh token\n  async refreshToken() {\n    try {\n      const response = await api.post('/auth/refresh');\n      return response.data;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      throw error;\n    }\n  }\n\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      const response = await api.post('/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error requesting password reset:', error);\n      throw error;\n    }\n  }\n\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n  }\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  }\n\n  // Verify email\n  async verifyEmail(token) {\n    try {\n      const response = await api.post('/auth/verify-email', {\n        token\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error verifying email:', error);\n      throw error;\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail() {\n    try {\n      const response = await api.post('/auth/resend-verification');\n      return response.data;\n    } catch (error) {\n      console.error('Error resending verification email:', error);\n      throw error;\n    }\n  }\n\n  // Logout\n  async logout() {\n    try {\n      const response = await api.post('/auth/logout');\n      return response.data;\n    } catch (error) {\n      console.error('Error during logout:', error);\n      throw error;\n    }\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["api","AuthService","login","credentials","response","post","data","error","console","register","userData","getCurrentUser","get","refreshToken","forgotPassword","email","resetPassword","token","newPassword","changePassword","currentPassword","put","verifyEmail","resendVerificationEmail","logout","authService"],"sources":["/Users/lino/Downloads/test/client/src/services/authService.js"],"sourcesContent":["import api from './api';\n\nclass AuthService {\n  // Login user\n  async login(credentials) {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  }\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Error during registration:', error);\n      throw error;\n    }\n  }\n\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n  }\n\n  // Refresh token\n  async refreshToken() {\n    try {\n      const response = await api.post('/auth/refresh');\n      return response.data;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      throw error;\n    }\n  }\n\n  // Forgot password\n  async forgotPassword(email) {\n    try {\n      const response = await api.post('/auth/forgot-password', { email });\n      return response.data;\n    } catch (error) {\n      console.error('Error requesting password reset:', error);\n      throw error;\n    }\n  }\n\n  // Reset password\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n  }\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  }\n\n  // Verify email\n  async verifyEmail(token) {\n    try {\n      const response = await api.post('/auth/verify-email', { token });\n      return response.data;\n    } catch (error) {\n      console.error('Error verifying email:', error);\n      throw error;\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail() {\n    try {\n      const response = await api.post('/auth/resend-verification');\n      return response.data;\n    } catch (error) {\n      console.error('Error resending verification email:', error);\n      throw error;\n    }\n  }\n\n  // Logout\n  async logout() {\n    try {\n      const response = await api.post('/auth/logout');\n      return response.data;\n    } catch (error) {\n      console.error('Error during logout:', error);\n      throw error;\n    }\n  }\n}\n\nexport const authService = new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}